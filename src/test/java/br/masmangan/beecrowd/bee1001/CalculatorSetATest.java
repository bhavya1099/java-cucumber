// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=setA_27c2fcf716
ROOST_METHOD_SIG_HASH=setA_c7f6a021ca

"""
  Scenario 1: Positive Test with Valid Parameter Value

  Details:
    TestName: testSetAWithValidParameter
    Description: This test is meant to check the setA method by invoking it with a valid int parameter.
  Execution:
    Arrange: Assign value 5 to a variable, `int testValue`.
    Act: Invoke the function setA with `testValue` as an argument.
    Assert: Use JUnit assertions to check if `this.a` is equal to `testValue`.
  Validation:
    The assertion aims to verify if the value of 'a' is updated correctly with `testValue`. It is significant to ensure that the base method functionality works as expected.

  Scenario 2: Test with Maximum Integer value

  Details:
    TestName: testSetAWithMaxIntValue
    Description: This test aims to evaluate the setA method's functionality when the maximum positive int value is used.
  Execution:
    Arrange: Assign maximum Integer value to a variable `int maxInt`.
    Act: Use setA method with `maxInt` as an argument.
    Assert: Use JUnit assertions to check if `this.a` is equal to `maxInt`.
  Validation:
    The test aims to verify if the method can handle and accurately set the maximum integer value. This scenario is vital as edge cases should be handled correctly in a robust application.

  Scenario 3: Test with Negative Integer value

  Details:
    TestName: testSetAWithNegativeInt
    Description: This test is meant to verify the setA method's functionality when a negative integer value is used.
  Execution:
    Arrange: Assign a negative value (let's say -5) `int negativeInt`.
    Act: Invoke the setA method with `negativeInt` as argument.
    Assert: Use JUnit assertions to check if 'a' is updated to `negativeInt`.
  Validation:
    The test aims to confirm if the setA method can handle and set negative integers correctly. This is important as the function should be capable of managing all potential input ranges.

  Scenario 4: Test with Zero as a Parameter

  Details:
    TestName: testSetAWithZero
    Description: This test is meant to verify the functionality of setA method when zero is used as a parameter.
  Execution:
    Arrange: Assign zero to a variable `int zeroVal`.
    Act: Invoke the setA method using `zeroVal` as an argument.
    Assert: Use JUnit assertions to check if `this.a` is updated to `zeroVal`.
  Validation:
    The test aims to confirm if the setA method accurately sets zero. This is vital as edge cases, such as using 0 as a numerical value, need to be handled correctly.
"""
*/

// ********RoostGPT********
package br.masmangan.beecrowd.bee1001;

import org.junit.Test;
import static org.junit.Assert.*;

public class CalculatorSetATest {

	Calculator calculator = new Calculator();

	@Test
	public void testSetAWithValidParameter() {
		int testValue = 5;
		calculator.setA(testValue);
		assertEquals(testValue, calculator.getA());
	}

	@Test
	public void testSetAWithMaxIntValue() {
		int maxInt = Integer.MAX_VALUE;
		calculator.setA(maxInt);
		assertEquals(maxInt, calculator.getA());
	}

	@Test
	public void testSetAWithNegativeInt() {
		int negativeInt = -5;
		calculator.setA(negativeInt);
		assertEquals(negativeInt, calculator.getA());
	}

	@Test
	public void testSetAWithZero() {
		int zeroVal = 0;
		calculator.setA(zeroVal);
		assertEquals(zeroVal, calculator.getA());
	}

}