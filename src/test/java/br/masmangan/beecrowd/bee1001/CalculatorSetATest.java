// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=setA_27c2fcf716
ROOST_METHOD_SIG_HASH=setA_c7f6a021ca
"""
  Scenario 1: Test when integer a is set to a positive value
  Details:
    TestName: setAPositiveValue
    Description: The test will check the functionality of setA() method by setting integer 'a' to a positive value.
  Execution:
    Arrange: An integer with a positive value will be created.
    Act: setA() method will be invoked with the created positive integer value.
    Assert: Assert that the private field 'a' in the class is equal to the positive integer value given as a parameter.
  Validation:
    This assertion aims to verify that the method correctly sets 'a' field to the positive value provided. The expected result is that 'a' is equal to the positive value after setA() is called. This basic test verifies the core functionality of the method.
  Scenario 2: Test when integer a is set to a negative value
  Details:
    TestName: setANegativeValue
    Description: The test will check the functionality of setA() method by setting integer 'a' to a negative value.
  Execution:
    Arrange: An integer with a negative value will be created.
    Act: setA() method will be invoked with the created negative integer value.
    Assert: Assert that the private field 'a' in the class is equal to the negative integer value given as a parameter.
  Validation:
    This assertion aims to verify that the method correctly sets 'a' field to the negative value provided. The expected result is that 'a' is equal to the negative value after setA() is called. This test helps us check the method's behavior with negative values.
  Scenario 3: Test when integer a is set to zero
  Details:
    TestName: setAZeroValue
    Description: The test will check the functionality of setA() method by setting integer 'a' to zero.
  Execution:
    Arrange: An integer with a zero value will be created.
    Act: setA method will be invoked with the created zero-value integer.
    Assert: Assert that the private field 'a' in the class is equal to zero.
  Validation:
    This assertion aims to verify that the method correctly sets 'a' field to zero when provided such parameter. The expected result is that 'a' is equal to zero after setA() is called. This test helps to check the method's behavior when zero value is assigned.
"""
*/
// ********RoostGPT********
package br.masmangan.beecrowd.bee1001;

import org.junit.Before;
import org.junit.Test;
import org.junit.Assert;
import org.junit.experimental.categories.Category;

@Category({ Categories.setA.class })
public class CalculatorSetATest {

	private Calculator calculator;

	@Before
	public void setUp() {
		calculator = new Calculator();
	}

	@Test
	public void setAPositiveValue() {
		int positiveValue = 5;
		calculator.setA(positiveValue);
		Assert.assertEquals(positiveValue, calculator.getA());
	}

	@Test
	public void setANegativeValue() {
		int negativeValue = -5;
		calculator.setA(negativeValue);
		Assert.assertEquals(negativeValue, calculator.getA());
	}

	@Test
	public void setAZeroValue() {
		int zero = 0;
		calculator.setA(zero);
		Assert.assertEquals(zero, calculator.getA());
	}

}