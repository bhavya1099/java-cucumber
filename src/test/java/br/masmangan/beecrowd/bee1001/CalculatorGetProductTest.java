/*
 * Copyright (C) 2021, Gherkin By Example and/or its contributors. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this code.  If not, see <https://www.gnu.org/licenses/>.
 *	
 * Please visit Gherkin By Example at https://github.com/gherkin-by-example
 * if you need additional information or have any questions.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=getProduct_24501888ed
ROOST_METHOD_SIG_HASH=getProduct_630a0cff5b
"""
  Scenario 1: Test when both a and b are positive integers
  Details:
    TestName: testProductOfPositiveIntegers
    Description: This test is meant to check the correctness of the getProduct method when both a and b are positive integers.
  Execution:
    Arrange: Set a and b as positive integers.
    Act: Invoke the getProduct method.
    Assert: Assert the result of the getProduct method to be the multiplication of a and b.
  Validation:
    The assertion aims to verify that the getProduct method correctly multiplies two positive integers. The expected result is based on the mathematical rule of multiplication. This test is significant as it checks the basic functionality of the getProduct method.
  Scenario 2: Test when both a and b are zero
  Details:
    TestName: testProductOfZeros
    Description: This test is meant to check the behavior of the getProduct method when both a and b are zero.
  Execution:
    Arrange: Set a and b as zero.
    Act: Invoke the getProduct method.
    Assert: Assert the result of the getProduct method to be zero.
  Validation:
    The assertion aims to verify that the getProduct method returns zero when both inputs are zero. The expected result is based on the mathematical rule that anything multiplied by zero equals zero. This test is significant as it checks the getProduct method's handling of zero values.
  Scenario 3: Test when a is positive and b is negative
  Details:
    TestName: testProductOfPositiveAndNegative
    Description: This test is meant to check the behavior of the getProduct method when a is positive and b is negative.
  Execution:
    Arrange: Set a as a positive integer and b as a negative integer.
    Act: Invoke the getProduct method.
    Assert: Assert the result of the getProduct method to be a negative number, which is the product of a and b.
  Validation:
    The assertion aims to verify that the getProduct method correctly multiplies a positive and a negative number. The expected result is based on the mathematical rule that the product of a positive and a negative number is a negative number. This test is significant as it checks the getProduct method's handling of mixed sign inputs.
  Scenario 4: Test when both a and b are negative
  Details:
    TestName: testProductOfNegativeNumbers
    Description: This test is meant to check the behavior of the getProduct method when both a and b are negative.
  Execution:
    Arrange: Set a and b as negative integers.
    Act: Invoke the getProduct method.
    Assert: Assert the result of the getProduct method to be a positive number, which is the product of a and b.
  Validation:
    The assertion aims to verify that the getProduct method correctly multiplies two negative numbers. The expected result is based on the mathematical rule that the product of two negative numbers is a positive number. This test is significant as it checks the getProduct method's handling of negative inputs.
"""
*/
// ********RoostGPT********
package br.masmangan.beecrowd.bee1001;

import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.assertEquals;
import org.junit.experimental.categories.Category;

@Category({ Categories.getProduct.class, Categories.roostTestTag1.class, Categories.roostTestTag2.class })
public class CalculatorGetProductTest {

	private int a;

	private int b;

	@Test
	@Category(Valid.class)
	public void testProductOfPositiveIntegers() {
		a = 5;
		b = 3;
		int expectedProduct = 15;
		assertEquals("Product of two positive integers is incorrect", expectedProduct, getProduct());
	}

	@Test
	@Category(Boundary.class)
	public void testProductOfZeros() {
		a = 0;
		b = 0;
		int expectedProduct = 0;
		assertEquals("Product of two zeros is incorrect", expectedProduct, getProduct());
	}

	@Test
	@Category(Valid.class)
	public void testProductOfPositiveAndNegative() {
		a = 5;
		b = -3;
		int expectedProduct = -15;
		assertEquals("Product of positive and negative integer is incorrect", expectedProduct, getProduct());
	}

	@Test
	@Category(Valid.class)
	public void testProductOfNegativeNumbers() {
		a = -5;
		b = -3;
		int expectedProduct = 15;
		assertEquals("Product of two negative integers is incorrect", expectedProduct, getProduct());
	}

	public int getProduct() {
		return a * b;
	}

}