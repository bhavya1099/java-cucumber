/*
 * Copyright (C) 2021, Gherkin By Example and/or its contributors. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this code.  If not, see <https://www.gnu.org/licenses/>.
 *	
 * Please visit Gherkin By Example at https://github.com/gherkin-by-example
 * if you need additional information or have any questions.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=getProduct_24501888ed
ROOST_METHOD_SIG_HASH=getProduct_630a0cff5b
Scenario 1: Test for Positive Numbers
Details:
  TestName: testGetProductWithPositiveNumbers.
  Description: This test is meant to check if the method getProduct correctly calculates the product of two positive integers.
Execution:
  Arrange: Set the values of a and b to positive integers.
  Act: Invoke the getProduct method.
  Assert: Compare the actual result with the expected product of the two positive integers.
Validation:
  The assertion aims to verify if the method correctly calculates the product of two positive integers. The test is significant as it checks the basic functionality of the getProduct method.
Scenario 2: Test for Negative Numbers
Details:
  TestName: testGetProductWithNegativeNumbers.
  Description: This test is meant to check if the method getProduct correctly calculates the product of two negative integers.
Execution:
  Arrange: Set the values of a and b to negative integers.
  Act: Invoke the getProduct method.
  Assert: Compare the actual result with the expected product of the two negative integers.
Validation:
  The assertion aims to verify if the method correctly calculates the product of two negative integers. This test is important as it validates the getProduct method's ability to handle negative numbers.
Scenario 3: Test for Zero
Details:
  TestName: testGetProductWithZero.
  Description: This test is meant to check if the method getProduct correctly calculates the product when one or both of the numbers is zero.
Execution:
  Arrange: Set the value of a or b to zero.
  Act: Invoke the getProduct method.
  Assert: Assert that the result is zero.
Validation:
  The assertion aims to verify if the method correctly handles cases where one or both the numbers are zero. This test is crucial as it checks the getProduct method's ability to handle zero values.
Scenario 4: Test for Large Numbers
Details:
  TestName: testGetProductWithLargeNumbers.
  Description: This test is meant to check if the method getProduct correctly calculates the product of two large integers.
Execution:
  Arrange: Set the values of a and b to large integers.
  Act: Invoke the getProduct method.
  Assert: Compare the actual result with the expected product of the two large integers.
Validation:
  The assertion aims to verify if the method correctly calculates the product of two large integers. This test is important as it validates the getProduct method's ability to handle large numbers.
*/
// ********RoostGPT********
package br.masmangan.beecrowd.bee1001;

import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.assertEquals;
import org.junit.experimental.categories.Category;

@Category({ Categories.getProduct.class, Categories.roostTestTag1.class, Categories.roostTestTag2.class })
public class CalculatorGetProductTest {

	private int a;

	private int b;

	@Test
	@Category(Categories.valid.class)
	public void testGetProductWithPositiveNumbers() {
		a = 5;
		b = 4;
		int expectedProduct = 20;
		assertEquals(expectedProduct, getProduct());
	}

	@Test
	@Category(Categories.valid.class)
	public void testGetProductWithNegativeNumbers() {
		a = -3;
		b = -7;
		int expectedProduct = 21;
		assertEquals(expectedProduct, getProduct());
	}

	@Test
	@Category(Categories.valid.class)
	public void testGetProductWithZero() {
		a = 0;
		b = 7;
		assertEquals(0, getProduct());
	}

	@Test
	@Category(Categories.boundary.class)
	public void testGetProductWithLargeNumbers() {
		a = 1000000;
		b = 2000000;
		long expectedProduct = 2000000000000L;
		assertEquals(expectedProduct, getProduct());
	}

	public int getProduct() {
		return a * b;
	}

}