// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=getProduct_24501888ed
ROOST_METHOD_SIG_HASH=getProduct_630a0cff5b
Scenario 1: Test when both input fields are positive
Details:
  TestName: testGetProductWithPositiveValues.
  Description: This test scenario is meant to check the product of two positive integers. Integers a and b are both positive.
Execution:
  Arrange: Initialize a and b as positive numbers.
  Act: Invoke the getProduct() method.
  Assert: Use JUnit assertion to verify that the returned product is the multiplication of the two variables initialized.
Validation:
  This assertion verifies that the method correctly multiplies two positive values. The reason this is the expected result is that multiplication of two positive integers should return a positive integer, which is the standard mathematical logic.
Scenario 2: Test when one input field is negative and the other is positive
Details:
  TestName: testGetProductWithOneNegativeOnePositiveInputs.
  Description: This test scenario checks the product of a positive integer and a negative integer. Here, a is positive and b is negative.
Execution:
  Arrange: Initiaize a as positive value and b as negative value.
  Act: Invoke the getProduct() method.
  Assert: Use JUnit assertion to verify that the returned product is the multiplication of a and b (e.g. a negative value).
Validation:
  The assertion checks that the method correctly multiplies a positive and a negative number. The expected result is a negative number, as per mathematical rules.
Scenario 3: Test when both input fields are zero
Details:
  TestName: testGetProductWithZeroValues.
  Description: This test scenario checks the product of two zeros. We would initialize both a and b as zero.
Execution:
  Arrange: Initialize a and b as zero.
  Act: Invoke the getProduct() method.
  Assert: Use JUnit assertion to verify that the returned product is 0.
Validation:
   The assertion verifies that the method correctly outputs 0 when both input variables are zero.

Scenario 4: Test when a is zero and b is negative
Details:
  TestName: testGetProductWithZeroAndNegativeValues.
  Description: This scenario checks the product of zero and a negative integer. Here, we would keep a as zero and b negative.
Execution:
  Arrange: Initialize a as zero and b as a negative number.
  Act: Invoke the getProduct() method.
  Assert: Use JUnit assertion to verify that the returned product is 0.
Validation:
  The assertion verifies that multiplying zero with a negative number should yield zero, which is a standard mathematical rule.
Scenario 5: Test when both input fields are negative
Details:
  TestName: testGetProductWithNegativeValues.
  Description: This test scenario is for the product of two negative integers. This scenario will initialize both a and b as negative.
Execution:
  Arrange: Initialize a and b as negative numbers.
  Act: Invoke the getProduct() method.
  Assert: Use JUnit assertion to verify that the returned product is a positive number.
Validation:
  This assertion verifies that the method correctly calculates the product of two negative numbers. The reason this is the expected result is based on arithmetic logic: the product of two negative numbers is positive.
*/
// ********RoostGPT********
package br.masmangan.beecrowd.bee1001;

import org.junit.Assert;
import org.junit.Test;
import org.junit.experimental.categories.Category;

@Category({ Categories.getProduct.class })
public class CalculatorGetProductTest {

	private int a;

	private int b;

	@Test
	public void testGetProductWithPositiveValues() {
		a = 5;
		b = 4;
		int expected = 20;
		int result = getProduct();
		Assert.assertEquals(expected, result);
	}

	@Test
	public void testGetProductWithOneNegativeOnePositiveInputs() {
		a = 5;
		b = -4;
		int expected = -20;
		int result = getProduct();
		Assert.assertEquals(expected, result);
	}

	@Test
	public void testGetProductWithZeroValues() {
		a = 0;
		b = 0;
		int expected = 0;
		int result = getProduct();
		Assert.assertEquals(expected, result);
	}

	@Test
	public void testGetProductWithZeroAndNegativeValues() {
		a = 0;
		b = -4;
		int expected = 0;
		int result = getProduct();
		Assert.assertEquals(expected, result);
	}

	@Test
	public void testGetProductWithNegativeValues() {
		a = -5;
		b = -4;
		int expected = 20;
		int result = getProduct();
		Assert.assertEquals(expected, result);
	}

	public int getProduct() {
		return a * b;
	}

}