// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getProduct_24501888ed
ROOST_METHOD_SIG_HASH=getProduct_630a0cff5b

================================VULNERABILITIES================================
Vulnerability: Uninitialized Variables
Issue: The variables 'a' and 'b' are used without being initialized. This can lead to unexpected behaviors or errors.
Solution: Ensure that all variables are initialized before being used. If the values of 'a' and 'b' are not known at the time of declaration, assign them a default value that indicates as such.

================================================================================
Scenario 1: Testing getProduct method with positive numbers

Details:
TestName: testGetProductWithPositiveNumbers
Description: This test is meant to check the getProduct method for a scenario where both a and b are positive numbers.
Execution:
Arrange: Initialize a and b to positive values.
Act: Invoke the getProduct method.
Assert: Validate if the return value from the getProduct method is equal to the product of a and b.
Validation:
The assertion aims to verify that the getProduct method accurately returns the product of a and b when both are positive. The significance of this test is to affirm if the basic functionality of the method is working as expected.

Scenario 2: Testing getProduct method with negative numbers

Details:
TestName: testGetProductWithNegativeNumbers
Description: This test is meant to check the getProduct method when a and b are negative numbers. The product of two negatives should be positive.
Execution:
Arrange: Initialize a and b to negative values.
Act: Invoke the getProduct method.
Assert: Assert that the returned value is the positive multiplication of a and b.
Validation:
The assertion aims to verify that the getProduct method accurately returns the positive product of a and b when both are negative. This is important because a negative number multiplied by a negative should equal a positive number, showcasing the correct behavior of the multiplication operator.

Scenario 3: Testing getProduct method with zero

Details:
TestName: testGetProductWithZero
Description: This test is meant to check the getProduct method to validate the condition when either a or b is zero.
Execution:
Arrange: Initialize a or b to zero.
Act: Invoke the getProduct method.
Assert: Assert that the returned value is zero.
Validation:
The assertion aims to validate that the getProduct method returns zero if either of the input parameters is zero. This is essential because multiplication by zero should always result in zero.

Scenario 4: Testing getProduct method with one positive and one negative number

Details:
TestName: testGetProductWithMixedNumbers
Description: This test is meant to check the getProduct method to verify the case when a is a positive number and b is a negative number.
Execution:
Arrange: Initialize a to a positive number and b to a negative number.
Act: Invoke the getProduct method.
Assert: Assert the returned value equals the negative product of a and b.
Validation:
The assertion aims to verify that the getProduct method accurately returns a negative product when the numbers are of different signs. This test is necessary to ensure the correct behavior of the multiplication operator when dealing with mixed signs.

*/

// ********RoostGPT********
package br.masmangan.beecrowd.bee1001;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class CalculatorGetProductTest {

	private Calculator calculator = new Calculator();

	@Test
	public void testGetProductWithPositiveNumbers() {
		calculator.setA(5);
		calculator.setB(6);
		int expected = 30;
		int actual = calculator.getProduct();
		assertEquals(expected, actual);
	}

	@Test
	public void testGetProductWithNegativeNumbers() {
		calculator.setA(-5);
		calculator.setB(-6);
		int expected = 30;
		int actual = calculator.getProduct();
		assertEquals(expected, actual);
	}

	@Test
	public void testGetProductWithZero() {
		calculator.setA(5);
		calculator.setB(0);
		int expected = 0;
		int actual = calculator.getProduct();
		assertEquals(expected, actual);
	}

	@Test
	public void testGetProductWithMixedNumbers() {
		calculator.setA(-5);
		calculator.setB(6);
		int expected = -30;
		int actual = calculator.getProduct();
		assertEquals(expected, actual);
	}

}