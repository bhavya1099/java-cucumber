// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=getSum_61f2af7779
ROOST_METHOD_SIG_HASH=getSum_d38a33793d
Scenario 1: Test when both numbers are positive integers
  Details:
    TestName: testSumOfPositiveIntegers
    Description: This test is aimed to validate the result when adding two positive integers.
  Execution:
    Arrange: Set a = 5 and b = 8.
    Act: Invoke the getSum method.
    Assert: Assert that the result returned by the method is 13.
  Validation:
    The assertion verifies that the sum of both integers is correctly calculated and the returned value is as expected. This validates if the basic arithmetic functionality of addition is working correctly.
Scenario 2: Test when both numbers are negative integers
  Details:
    TestName: testSumOfNegativeIntegers
    Description: This test is aimed to validate the result when adding two negative integers.
  Execution:
    Arrange: Set a = -3 and b = -7.
    Act: Invoke the getSum method.
    Assert: Assert that the result returned by the method is -10.
  Validation:
    The assertion verifies that the method correctly sums two negative integers and returns the correct value. This covers the calculation scenario with negative numbers.
Scenario 3: Test when one number is zero
  Details:
    TestName: testSumWithZero
    Description: This test is aimed to check the method's behaviour when one of the numbers to be added is zero.
  Execution:
    Arrange: Set a = 0 and b = 5.
    Act: Invoke the getSum method.
    Assert: Assert that the result returned by the method is 5.
  Validation:
    The assertion verifies that the method correctly adds a number with zero and the returned result is as expected. This explicitly covers the scenario where one input is zero as per addition rules.
Scenario 4: Test when both numbers are zero
  Details:
    TestName: testSumWithBothZero
    Description: This test is meant to validate the sum when both numbers to be added are zeros.
  Execution:
    Arrange: Set a = 0 and b = 0.
    Act: Invoke the getSum method.
    Assert: Assert that the result returned by the method is 0.
  Validation:
    The assertion verifies that the sum of both numbers, when they are zero, correctly produces 0. This is to cover an edge case where both inputs are zero.

Scenario 5: Test when adding a positive and a negative number
  Details:
    TestName: testSumOfPositiveAndNegativeIntegers
    Description: This test is designed to validate the sum when one number is positive and the other is negative.
  Execution:
    Arrange: Set a = 5 and b = -3.
    Act: Invoke the getSum method.
    Assert: Assert that the result returned by the method is 2.
  Validation:
    The assertion verifies that the method correctly calculates the sum of a positive and a negative number. This is to ensure the method abides by the arithmetic law of addition.
*/
// ********RoostGPT********
package br.masmangan.beecrowd.bee1001;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.Test;
import org.junit.experimental.categories.Category;

@Category(Categories.getSum.class)
public class CalculatorGetSumTest {

	private Calculator calculator;

	@Before
	public void setUp() {
		calculator = new Calculator();
	}

	@Test
	public void testSumOfPositiveIntegers() {
		calculator.setValues(5, 8);
		int result = calculator.getSum();
		Assert.assertEquals(13, result);
	}

	@Test
	public void testSumOfNegativeIntegers() {
		calculator.setValues(-3, -7);
		int result = calculator.getSum();
		Assert.assertEquals(-10, result);
	}

	@Test
	public void testSumWithZero() {
		calculator.setValues(0, 5);
		int result = calculator.getSum();
		Assert.assertEquals(5, result);
	}

	@Test
	public void testSumWithBothZero() {
		calculator.setValues(0, 0);
		int result = calculator.getSum();
		Assert.assertEquals(0, result);
	}

	@Test
	public void testSumOfPositiveAndNegativeIntegers() {
		calculator.setValues(5, -3);
		int result = calculator.getSum();
		Assert.assertEquals(2, result);
	}

}