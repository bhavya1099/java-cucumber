// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=setA_a669585e3b
ROOST_METHOD_SIG_HASH=setA_4612eff528
Scenario 1: Valid Positive Double Value
Details:
  TestName: testSetAWithPositiveDouble
  Description: In this scenario, the test is meant to check if the method `setA` appropriately sets the member variable `a` with a given positive double value.
Execution:
  Arrange: Define a positive double value as input.
  Act: Invoke the `setA` method with the positive value.
  Assert: Use JUnit assertions to check if the value of `a` is equal to the input value.
Validation:
  This assertion aims to verify if `a` is correctly updated with a positive double value. This is a basic functionality test to ensure that the method `setA` properly updates the value of `a`.
Scenario 2: Valid Negative Double Value
Details:
  TestName: testSetAWithNegativeDouble
  Description: This scenario checks if the method `setA` sets the member variable `a` accurately with a given negative double value.
Execution:
  Arrange: Define a negative double value as input.
  Act: Invoke the `setA` with the negative value.
  Assert: Use JUnit assertions to confirm if the value of `a` is equal to the input value.
Validation:
  This assertion verifies whether `a` is updated correctly with a negative value. This ensures that the method `setA` can handle negative input, which is crucial for versatility.
Scenario 3: Valid Zero Double Value
Details:
  TestName: testSetAWithZeroDouble
  Description: In this scenario, the test is designed to validate if the method `setA` sets the member variable `a` with a zero double value without any issues.
Execution:
  Arrange: Define the double value zero as input.
  Act: Invoke the `setA` method with the zero value.
  Assert: Use JUnit assertions to check that the value of `a` is zero.
Validation:
  This assertion checks if `a` can be correctly set to zero. This is significant in cases where `a` might have to be zeroed out for a new calculation or reset.
Scenario 4: large Double Value
Details:
  TestName: testSetAWithLargeDoubleValue
  Description: The scenario checks if the method `setA` can handle and accurately set large double value.
Execution:
  Arrange: Define a large double value as input.
  Act: Invoke the `setA` method with the large value.
  Assert: Use JUnit assertions to confirm the value of `a` is equal to the input value.
Validation:
  This test verifies if `a` can be accurately updated with a large value and thus evaluates the method's high-end range.
*/
// ********RoostGPT********
package br.masmangan.beecrowd.bee1005;

import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;

@Category({ Categories.setA.class })
public class StudentGradeSetATest {

	private double a;

	private double b;

	@Before
	public void setup() {
		a = 0;
		b = 0;
	}

	@Test
	public void testSetAWithPositiveDouble() {
		double expected = 5.0;
		setA(expected);
		assertEquals(expected, a, 0.0);
	}

	@Test
	public void testSetAWithNegativeDouble() {
		double expected = -3.7;
		setA(expected);
		assertEquals(expected, a, 0.0);
	}

	@Test
	public void testSetAWithZeroDouble() {
		double expected = 0.0;
		setA(expected);
		assertEquals(expected, a, 0.0);
	}

	@Test
	public void testSetAWithLargeDoubleValue() {
		double expected = Double.MAX_VALUE;
		setA(expected);
		assertEquals(expected, a, 0.0);
	}

	public void setA(double a) {
		this.a = a;
	}

}