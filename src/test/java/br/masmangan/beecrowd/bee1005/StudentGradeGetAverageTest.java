// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

"""
Scenario 1: Successful calculation of average with typical values
Details:
  TestName: testAverageCalculationWithTypicalValues
  Description: This test is meant to check the getAverage functionality with typical values of a and b.
Execution:
  Arrange: Set values of a and b to any typical values, say a=2.0 and b=3.0.
  Act: Invoke the getAverage method.
  Assert: Use the JUnit assertion to check if the returned value is (a * 3.5 + b * 7.5) / 11.0.
Validation:
  The assertion aims to verify if the getAverage method is correctly computing the expected formula. This is important to assure the reliability of this basic mathematical operation.

Scenario 2: Successful calculation of average with zero values
Details:
  TestName: testAverageCalculationWithZeroValues
  Description: This test is meant to check the getAverage calculation when a and b are both zeros.
Execution:
  Arrange: Set values of a and b both to 0.0.
  Act: Invoke the getAverage method.
  Assert: Use JUnit assertion to check if the returned value is zero.
Validation:
  This test is important to ensure that the method can correctly handle a situation where both input values are zero, returning zero as the expected average.

Scenario 3: Successful calculation of average with negative values
Details:
  TestName: testAverageCalculationWithNegativeValues
  Description: This test is meant to check the getAverage calculation when a and b are both negative values.
Execution:
  Arrange: Set values of a and b both to negative values, say a=-2.0 and b=-3.0.
  Act: Invoke the getAverage method.
  Assert: Use JUnit assertion to check if the returned value is equal to (a * 3.5 + b * 7.5) / 11.0.
Validation:
  This test verifies if the getAverage method correctly deals with negative input values. This assures the formula's correctness for all real numbers.

Scenario 4: Successful calculation of average with one of the values being zero
Details:
  TestName: testAverageCalculationWithOneZeroValue
  Description: This test is meant to check the getAverage calculation when a is zero and b is a non-zero, positive value.
Execution:
  Arrange: Set the value of a to 0.0 and b to any non-zero positive value, say b=3.0.
  Act: Invoke the getAverage method.
  Assert: Use JUnit assertion to check if the returned value is equal to (b * 7.5) / 11.0.
Validation:
  This test verifies if the getAverage method correctly calculates the average when one of the values is zero and the other is a non-zero value. This is significant for validating all possible edge cases.
"""
*/

// ********RoostGPT********
package br.masmangan.beecrowd.bee1005;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.mockito.Mockito;

public class StudentGradeGetAverageTest {

	private double a;

	private double b;

	@Before
	public void setUp() {
		a = Mockito.mock(Double.class);
		b = Mockito.mock(Double.class);
	}

	@Test
	public void testAverageCalculationWithTypicalValues() {
		a = 2.0;
		b = 3.0;
		assertEquals((a * 3.5 + b * 7.5) / 11.0, getAverage(a, b), 0.0);
	}

	@Test
	public void testAverageCalculationWithZeroValues() {
		a = 0.0;
		b = 0.0;
		assertEquals(0.0, getAverage(a, b), 0.0);
	}

	@Test
	public void testAverageCalculationWithNegativeValues() {
		a = -2.0;
		b = -3.0;
		assertEquals((a * 3.5 + b * 7.5) / 11.0, getAverage(a, b), 0.0);
	}

	@Test
	public void testAverageCalculationWithOneZeroValue() {
		a = 0.0;
		b = 3.0;
		assertEquals((b * 7.5) / 11.0, getAverage(a, b), 0.0);
	}

	public double getAverage(double a, double b) {
		return (a * 3.5 + b * 7.5) / 11.0;
	}

}