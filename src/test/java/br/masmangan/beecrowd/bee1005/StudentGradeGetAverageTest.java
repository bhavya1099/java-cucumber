// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Claude AI and AI Model claude-3-opus-20240229
ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3
Here are some JUnit test scenarios for the provided getAverage() method:
Scenario 1: Test average calculation with positive values
Details:
  TestName: averageWithPositiveValues()
  Description: This test verifies that the getAverage() method correctly calculates the average when both a and b are positive values.
Execution:
  Arrange: Set a = 5.0 and b = 10.0
  Act: Call getAverage()
  Assert: Assert that the result is equal to (5.0 * 3.5 + 10.0 * 7.5) / 11.0
Validation:
  The assertion checks if the calculated average matches the expected value based on the formula (a * 3.5 + b * 7.5) / 11.0.
  This test ensures that the method correctly calculates the average when provided with positive input values.
Scenario 2: Test average calculation with negative values
Details:
  TestName: averageWithNegativeValues()
  Description: This test verifies that the getAverage() method correctly calculates the average when both a and b are negative values.
Execution:
  Arrange: Set a = -5.0 and b = -10.0
  Act: Call getAverage()
  Assert: Assert that the result is equal to (-5.0 * 3.5 + -10.0 * 7.5) / 11.0
Validation:
  The assertion checks if the calculated average matches the expected value based on the formula (a * 3.5 + b * 7.5) / 11.0, even when the inputs are negative.
  This test ensures that the method handles negative input values correctly.
Scenario 3: Test average calculation with zero values
Details:
  TestName: averageWithZeroValues()
  Description: This test verifies that the getAverage() method correctly calculates the average when either a or b is zero.
Execution:
  Arrange: Set a = 0.0 and b = 10.0
  Act: Call getAverage()
  Assert: Assert that the result is equal to (0.0 * 3.5 + 10.0 * 7.5) / 11.0
Validation:
  The assertion checks if the calculated average matches the expected value based on the formula (a * 3.5 + b * 7.5) / 11.0, even when one of the inputs is zero.
  This test ensures that the method handles zero input values correctly.
Scenario 4: Test average calculation with large values
Details:
  TestName: averageWithLargeValues()
  Description: This test verifies that the getAverage() method correctly calculates the average when both a and b are large values.
Execution:
  Arrange: Set a = 1000000.0 and b = 2000000.0
  Act: Call getAverage()
  Assert: Assert that the result is equal to (1000000.0 * 3.5 + 2000000.0 * 7.5) / 11.0
Validation:
  The assertion checks if the calculated average matches the expected value based on the formula (a * 3.5 + b * 7.5) / 11.0, even when the inputs are large values.
  This test ensures that the method can handle large input values without any precision or overflow issues.
Note: Since the provided method does not have any error handling or edge case scenarios, the test scenarios focus on verifying the correctness of the average calculation for different input values.
*/
// ********RoostGPT********
package br.masmangan.beecrowd.bee1005;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import java.util.Arrays;
import java.util.Collection;
import org.junit.experimental.categories.Category;

@Category({ Categories.getAverage.class })
@RunWith(Parameterized.class)
public class StudentGradeGetAverageTest {

	private StudentGrade studentGrade;

	private double a;

	private double b;

	private double expectedAverage;

	public StudentGradeGetAverageTest(double a, double b, double expectedAverage) {
		this.a = a;
		this.b = b;
		this.expectedAverage = expectedAverage;
	}

	@Before
	public void setUp() {
		studentGrade = new StudentGrade();
		studentGrade.setA(a);
		studentGrade.setB(b);
	}

	@Parameterized.Parameters
	public static Collection<Object[]> data() {
		return Arrays.asList(new Object[][] { { 5.0, 7.1, 6.43181818181818 }, { 0.0, 7.1, 4.88636363636364 },
				{ 10.0, 10.0, 10.0 }, { 0.0, 0.0, 0.0 } });
	}

	@Test
	public void testGetAverage() {
		double actualAverage = studentGrade.getAverage();
		Assert.assertEquals(expectedAverage, actualAverage, 0.000000001);
	}

}