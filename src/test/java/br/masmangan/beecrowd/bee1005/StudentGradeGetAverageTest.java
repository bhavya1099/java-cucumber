
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

Scenario 1: Test for Normal Values

Details:
  TestName: testAverageWithNormalValues.
  Description: This test is to validate the getAverage method when a and b are set to normal, non-zero values.
Execution:
  Arrange: Set a and b to known values, for example, a = 2.0 and b = 3.0.
  Act: Invoke the getAverage method.
  Assert: Assert that the returned value is as expected, which should be (2.0 * 3.5 + 3.0 * 7.5) / 11.0.
Validation:
  This assertion verifies that the getAverage method correctly calculates the average based on the formula provided. This is important as it ensures the basic functionality of the getAverage method.

Scenario 2: Test for Zero Values

Details:
  TestName: testAverageWithZeroValues.
  Description: This test is to validate the getAverage method when a and b are set to zero.
Execution:
  Arrange: Set a and b to zero.
  Act: Invoke the getAverage method.
  Assert: Assert that the returned value is zero.
Validation:
  This assertion verifies that the getAverage method correctly handles the case where a and b are zero. This is important as it tests the edge case where a and b are at their minimum possible values.

Scenario 3: Test for Negative Values

Details:
  TestName: testAverageWithNegativeValues.
  Description: This test is to validate the getAverage method when a and b are set to negative values.
Execution:
  Arrange: Set a and b to known negative values, for example, a = -2.0 and b = -3.0.
  Act: Invoke the getAverage method.
  Assert: Assert that the returned value is as expected, which should be (-2.0 * 3.5 + -3.0 * 7.5) / 11.0.
Validation:
  This assertion verifies that the getAverage method correctly calculates the average even when a and b are negative. This is important as it tests the edge case where a and b are negative.

Scenario 4: Test for Maximum Values

Details:
  TestName: testAverageWithMaxValues.
  Description: This test is to validate the getAverage method when a and b are set to their maximum possible values.
Execution:
  Arrange: Set a and b to Double.MAX_VALUE.
  Act: Invoke the getAverage method.
  Assert: Assert that the returned value is as expected, which should be (Double.MAX_VALUE * 3.5 + Double.MAX_VALUE * 7.5) / 11.0.
Validation:
  This assertion verifies that the getAverage method correctly handles the case where a and b are at their maximum possible values. This is important as it tests the edge case where a and b are at their maximum.
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1005;

import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.assertEquals;

public class StudentGradeGetAverageTest {

	@Test
	@Category(Categories.valid.class)
	public void testAverageWithNormalValues() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.0);
		studentGrade.setB(3.0);
		double expectedAverage = (2.0 * 3.5 + 3.0 * 7.5) / 11.0;
		assertEquals(expectedAverage, studentGrade.getAverage(), 0.001);
	}

	@Test
	@Category(Categories.boundary.class)
	public void testAverageWithZeroValues() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0.0);
		studentGrade.setB(0.0);
		double expectedAverage = 0.0;
		assertEquals(expectedAverage, studentGrade.getAverage(), 0.001);
	}

	@Test
	@Category(Categories.boundary.class)
	public void testAverageWithNegativeValues() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(-2.0);
		studentGrade.setB(-3.0);
		double expectedAverage = (-2.0 * 3.5 + -3.0 * 7.5) / 11.0;
		assertEquals(expectedAverage, studentGrade.getAverage(), 0.001);
	}

	@Test
	@Category(Categories.boundary.class)
	public void testAverageWithMaxValues() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(Double.MAX_VALUE);
		studentGrade.setB(Double.MAX_VALUE);
		double expectedAverage = (Double.MAX_VALUE * 3.5 + Double.MAX_VALUE * 7.5) / 11.0;
		assertEquals(expectedAverage, studentGrade.getAverage(), 0.001);
	}

}