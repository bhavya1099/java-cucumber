// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3
Scenario 1: Test to verify the average with normal inputs
  Details:
    TestName: testAverageWithNormalInputs.
    Description: This test is meant to check the getAverage() function given the normal inputs. The inputs for this test should be the values which student usually gets in their test, like 80, 90, out of 100.
  Execution:
    Arrange: Set value a as 80 and b as 90.
    Act: Invoke the getAverage method.
    Assert: Expected result is 86.0.
  Validation:
    The assertion verifies that the getAverage() properly calculates the average for typical inputs. The average will be used in other parts of the application to decide on the student's grade.
Scenario 2: Test to verify the average with special case inputs
  Details:
    TestName: testAverageWithSpecialCaseInputs.
    Description: This test is meant to check the getAverage() function given the special case inputs. In this scenario, student may be absent and he gets 0 in the tests.
  Execution:
    Arrange: Set value a as 0 and b as 0.
    Act: Invoke the getAverage method.
    Assert: Expected result is 0.0.
  Validation:
    This test ensures the program handles the special case inputs properly without returning an error or an unexpected result.
Scenario 3: Test to verify the average with maximum inputs
  Details:
    TestName: testAverageWithMaxInputs.
    Description: This test is meant to check the getAverage() function given the maximum inputs. In this scenario, student got highest score that is 100 in both the tests.
  Execution:
    Arrange: Set value a as 100 and b as 100.
    Act: Invoke the getAverage method.
    Assert: Expected result is 100.0.
  Validation:
    This test ensures that even if a student achieves the maximum scores, the program can handle the situation without returning an error.
Scenario 4: Test to verify the average with out-of-range inputs
  Details:
    TestName: testAverageWithOutOfRangeInputs.
    Description: This test is meant to check getAverage() function when a or b values are more than 100, which are considered as out-of-range.
  Execution:
    Arrange: Set value a as 110 and b as 120.
    Act: Invoke the getAverage method.
    Assert: Expected result is 115.0.
  Validation:
    This test ensures the program can properly calculate average even with out-of-range inputs. By that, the user may be alerted about the entered wrong values.
These are some of the test scenarios that can be generated for the getAverage method. More edge cases and error handling scenarios can be added as per the application requirements and business logic.
*/
// ********RoostGPT********
package br.masmangan.beecrowd.bee1005;

import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.assertEquals;
import org.junit.experimental.categories.Category;

@Category({ Categories.getAverage.class })
public class StudentGradeGetAverageTest {

	private StudentGrade studentGrade;

	@Before
	public void setUp() {
		studentGrade = new StudentGrade();
	}

	@Test
	@Category(Categories.valid.class)
	public void testAverageWithNormalInputs() {
		studentGrade.setA(80);
		studentGrade.setB(90);
		double expected = ((80 * 3.5) + (90 * 7.5)) / 11.0;
		double actual = studentGrade.getAverage();
		assertEquals(expected, actual, 0.0001);
	}

	@Test
	@Category(Categories.boundary.class)
	public void testAverageWithSpecialCaseInputs() {
		studentGrade.setA(0);
		studentGrade.setB(0);
		double expected = 0.0;
		double actual = studentGrade.getAverage();
		assertEquals(expected, actual, 0.0001);
	}

	@Test
	@Category(Categories.valid.class)
	public void testAverageWithMaxInputs() {
		studentGrade.setA(100);
		studentGrade.setB(100);
		double expected = ((100 * 3.5) + (100 * 7.5)) / 11.0;
		double actual = studentGrade.getAverage();
		assertEquals(expected, actual, 0.0001);
	}

	@Test(expected = IllegalArgumentException.class)
	@Category(Categories.invalid.class)
	public void testAverageWithOutOfRangeInputs() {
		studentGrade.setA(110);
		studentGrade.setB(120);
	}

}