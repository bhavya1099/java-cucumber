// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

"""
  Scenario 1: Test to check if the method returns the correct average

  Details:
    TestName: testCorrectAverageReturn.
    Description: This test is designed to check if the method correctly calculates and returns the correct average of given a and b where a weighs 3.5 and b weighs 7.5 respectively in the weighted average.
  Execution:
    Arrange: Initialize variables a and b with values of your choice.
    Act: Call the getAverage method.
    Assert: Assert that the returned value matches the expected average.
  Validation:
    The test verifies that the getAverage method correctly calculates the weighted average based on the given weights (3.5 for a and 7.5 for b). The average value is significant in many contexts such as calculating the final score, calculating total progress, etc.

  Scenario 2: Test to check if the method handles and returns 0 when both a and b are 0.

  Details:
    TestName: testZeroBothVariables.
    Description: This test is designed to check if the method correctly handles and returns 0 when both a and b are 0.
  Execution:
    Arrange: Initialize both variables a and b with 0.
    Act: Call the getAverage method.
    Assert: Assert that the returned value is 0.
  Validation:
    The test verifies that the getAverage method correctly handles the case when both inputs are 0, returning 0 as the average. This is an edge case situation where the weighted average is not applicable as there is no weightage to be distributed.

  Scenario 3: Test to check if the method handles and returns the correct average when a is 0 and b is not.

  Details:
    TestName: testZeroVariableA.
    Description: This test is designed to check if the method correctly handles and returns the average when a is 0 and b is not 0.
  Execution:
    Arrange: Initialize variable a with 0 and b with a value of your choice.
    Act: Call the getAverage method.
    Assert: Assert that the returned value is the expected average computed from b's value and weight alone.
  Validation:
    The test verifies that the getAverage method can correctly handle situations where one of the inputs is 0 but the other is not, and still return a meaningful weighted average.

  Scenario 4: Test to check if the method handles and returns the correct average when b is 0 and a is not.

  Details:
    TestName: testZeroVariableB.
    Description: This test is designed to check if the method correctly handles and returns the average when b is 0 and a is not 0.
  Execution:
    Arrange: Initialize variable b with 0 and a with a value of your choice.
    Act: Call the getAverage method.
    Assert: Assert that the returned value is the expected average computed from a's value and weight alone.
  Validation:
    The test verifies that the getAverage method can correctly handle situations where one of the inputs is 0 but the other is not, and still return a meaningful weighted average.
"""
*/

// ********RoostGPT********
package br.masmangan.beecrowd.bee1005;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class StudentGradeGetAverageTest {

	private double a;

	private double b;

	@Before
	public void setup() {
		a = 0.0;
		b = 0.0;
	}

	private double getAverage() {
		return (a * 3.5 + b * 7.5) / 11.0;
	}

	@Test
	public void testCorrectAverageReturn() {
		a = 10.0;
		b = 20.0;
		double result = getAverage();
		double expected = (10.0 * 3.5 + 20.0 * 7.5) / 11.0;
		assertEquals(expected, result, 0.0);
	}

	@Test
	public void testZeroBothVariables() {
		a = 0.0;
		b = 0.0;
		double result = getAverage();
		assertEquals(0.0, result, 0.0);
	}

	@Test
	public void testZeroVariableA() {
		a = 0.0;
		b = 10.0;
		double result = getAverage();
		double expected = (0.0 * 3.5 + 10.0 * 7.5) / 11.0;
		assertEquals(expected, result, 0.0);
	}

	@Test
	public void testZeroVariableB() {
		a = 10.0;
		b = 0.0;
		double result = getAverage();
		double expected = (10.0 * 3.5 + 0.0 * 7.5) / 11.0;
		assertEquals(expected, result, 0.0);
	}

}
