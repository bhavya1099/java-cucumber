// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Vertex AI and AI Model code-bison-32k
ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3
 **SCENARIO 1: Valid Input - Positive Numbers**
**TestName**: `testAverageWithPositiveNumbers`
**Description**: This test checks the average calculation with valid positive numbers for both `a` and `b`.
**Execution**:
* Arrange: Set `a` to 10.0 and `b` to 20.0.
* Act: Invoke the `getAverage()` method.
* Assert: Verify that the returned average is 18.181818181818183 (approximately).
**Validation**: This test ensures that the method correctly calculates the average when both `a` and `b` are positive numbers. It validates the core functionality of the method for typical usage.
**SCENARIO 2: Valid Input - Negative Numbers**
**TestName**: `testAverageWithNegativeNumbers`
**Description**: This test checks the average calculation with valid negative numbers for both `a` and `b`.
**Execution**:
* Arrange: Set `a` to -5.0 and `b` to -10.0.
* Act: Invoke the `getAverage()` method.
* Assert: Verify that the returned average is -8.636363636363637 (approximately).
**Validation**: This test ensures that the method correctly calculates the average when both `a` and `b` are negative numbers. It demonstrates that the method handles negative inputs as expected.
**SCENARIO 3: Valid Input - Zeroes**
**TestName**: `testAverageWithZeroes`
**Description**: This test checks the average calculation when both `a` and `b` are zero.
**Execution**:
* Arrange: Set `a` to 0.0 and `b` to 0.0.
* Act: Invoke the `getAverage()` method.
* Assert: Verify that the returned average is 0.0.
**Validation**: This test ensures that the method correctly handles the case where both `a` and `b` are zero, resulting in an average of zero. It covers a specific edge case where the input values are zero.
**SCENARIO 4: Null Values**
**TestName**: `testAverageWithNullValues`
**Description**: This test checks the behavior of the method when both `a` and `b` are null.
**Execution**:
* Arrange: Set `a` and `b` to null.
* Act: Invoke the `getAverage()` method.
* Assert: Verify that the method throws a `NullPointerException`.
**Validation**: This test ensures that the method handles null values appropriately by throwing a `NullPointerException`. It tests the method's behavior in the presence of missing or invalid input.
**SCENARIO 5: Boundary Values - Minimum and Maximum**
**TestName**: `testAverageWithBoundaryValues`
**Description**: This test checks the average calculation with minimum and maximum values for both `a` and `b`.
**Execution**:
* Arrange: Set `a` to the minimum double value (Double.MIN_VALUE) and `b` to the maximum double value (Double.MAX_VALUE).
* Act: Invoke the `getAverage()` method.
* Assert: Verify that the returned average is approximately 4.740105263157894E308 (a very large number).
**Validation**: This test ensures that the method can handle extreme values without causing overflows or underflows. It demonstrates the method's behavior at the boundaries of its input domain.
**SCENARIO 6: Special Values - NaN and Infinity**
**TestName**: `testAverageWithSpecialValues`
**Description**: This test checks the average calculation with special values like NaN (Not-a-Number) and Infinity.
**Execution**:
* Arrange: Set `a` to Double.NaN and `b` to Double.POSITIVE_INFINITY.
* Act: Invoke the `getAverage()` method.
* Assert: Verify that the returned average is Double.NaN.
**Validation**: This test ensures that the method handles special floating-point values correctly. It tests the method's behavior in the presence of invalid or exceptional input values.
*/
// ********RoostGPT********
package br.masmangan.beecrowd.bee1005;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.experimental.categories.Category;
import org.junit.Test;

@Category({ Categories.getAverage.class })
@DisplayName("Tests for Student Grade Average Calculator")
class StudentGradeGetAverageTest {

	private final StudentGrade studentGrade = new StudentGrade();

	@ParameterizedTest
	@CsvSource({ "10.0, 20.0, 18.181818181818183", "-5.0, -10.0, -8.636363636363637", "0.0, 0.0, 0.0" })
	@Tag(Categories.valid.class)
	@DisplayName("Test average calculation with valid input")
	void testAverageWithValidInput(double a, double b, double expectedAverage) {
		studentGrade.setA(a);
		studentGrade.setB(b);
		double actualAverage = studentGrade.getAverage();
		assertEquals(expectedAverage, actualAverage, 0.000001);
	}

	@Test
	@Tag(Categories.invalid.class)
	@DisplayName("Test average calculation with null values")
	void testAverageWithNullValues() {
		assertThrows(NullPointerException.class, () -> studentGrade.getAverage());
	}

	@Test
	@Tag(Categories.boundary.class)
	@DisplayName("Test average calculation with boundary values")
	void testAverageWithBoundaryValues() {
		studentGrade.setA(Double.MIN_VALUE);
		studentGrade.setB(Double.MAX_VALUE);
		double actualAverage = studentGrade.getAverage();
		assertEquals(Double.POSITIVE_INFINITY, actualAverage); // Improvement
	}

	@Test
	@Tag(Categories.invalid.class)
	@DisplayName("Test average calculation with special values")
	void testAverageWithSpecialValues() {
		studentGrade.setA(Double.NaN);
		studentGrade.setB(Double.POSITIVE_INFINITY);
		double actualAverage = studentGrade.getAverage();
		assertEquals(Double.NaN, actualAverage);
	}

}