// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

Certainly, here are the test scenarios for the `getAverage()` method in the `StudentGrade` entity, using the provided setter methods `setA(double a)` and `setB(double b)`:

---

**Scenario 1: Normal Condition Test**

Details:
TestName: calculateAverageWithStandardInputs
Description: This test verifies the average calculation with standard positive input values for `a` and `b`.
Execution:
- **Arrange**: Set `a` to 2.0 and `b` to 8.0 using `setA` and `setB`.
- **Act**: Call `getAverage()` to calculate the average.
- **Assert**: Assert that the result matches the expected value of `(2.0 * 3.5 + 8.0 * 7.5) / 11.0`.
Validation:
- This validates that the method calculates the weighted average correctly when typical numbers are utilized. It confirms the correctness of the weight distribution formula in a common case.

---

**Scenario 2: Zero Input Test**

Details:
TestName: calculateAverageWithZeroInputs
Description: Test the average calculation with zero values for both `a` and `b`.
Execution:
- **Arrange**: Set both `a` and `b` to 0.0.
- **Act**: Call `getAverage()`.
- **Assert**: Assert that the average equals 0.0.
Validation:
- Verifying the function handles zero inputs correctly, which can be common in educational environments where initial or default values might be zero.

---

**Scenario 3: Negative Input Test**

Details:
TestName: calculateAverageWithNegativeInputs
Description: Test the average calculation when `a` or `b` or both are negative, ensuring no unexpected behavior with negative numbers.
Execution:
- **Arrange**: Set `a` to -2.5, and `b` to -3.3.
- **Act**: Call `getAverage()`.
- **Assert**: Assert that the result matches the expected negative value.
Validation:
- Important to ensure that the method can handle negative values, which might represent adjustments or errors in data input scenarios.

---

**Scenario 4: High Number Input Test**

Details:
TestName: calculateAverageWithHighInputs
Description: Evaluate the method's precision and performance with very high input values.
Execution:
- **Arrange**: Set `a` to 1000000.0 and `b` to 2000000.0.
- **Act**: Call `getAverage()`.
- **Assert**: Verify the calculated average matches the expected large value.
Validation:
- This test checks for any overflow or precision issues that could arise with very large input values, ensuring robustness in all scenarios.

---

**Scenario 5: Mixed Sign Input Test**

Details:
TestName: calculateAverageWithMixedSignInputs
Description: Evaluate the average calculation when inputs have different signs (i.e., one is positive, the other is negative).
Execution:
- **Arrange**: Set `a` to -4.0 and `b` to 5.0.
- **Act**: Call `getAverage()`.
- **Assert**: Check that the result is in accordance with the expected mixed-sign outcome.
Validation:
- This ensures that the formula correctly computes scenarios where inputs may have offsetting values, reflecting real-world scenarios of balancing positive and negative adjustments.

---

These test scenarios cover a range of inputs and edge cases to ensure that the `getAverage` method functions correctly under various circumstances, providing a reliable outcome consistent with expected mathematical operations.
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1005;

import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.experimental.categories.Category;

public class StudentGradeGetAverageTest {

	@Test
	@Category(Categories.valid.class)
	public void calculateAverageWithStandardInputs() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.0);
		studentGrade.setB(8.0);
		double expectedAverage = (2.0 * 3.5 + 8.0 * 7.5) / 11.0;
		assertEquals("Standard input average calculation is incorrect", expectedAverage, studentGrade.getAverage(),
				0.00001);
	}

	@Test
	@Category(Categories.valid.class)
	public void calculateAverageWithZeroInputs() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0.0);
		studentGrade.setB(0.0);
		double expectedAverage = 0.0;
		assertEquals("Zero input average should be zero", expectedAverage, studentGrade.getAverage(), 0.00001);
	}

	@Test
	@Category(Categories.boundary.class)
	public void calculateAverageWithNegativeInputs() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(-2.5);
		studentGrade.setB(-3.3);
		double expectedAverage = (-2.5 * 3.5 - 3.3 * 7.5) / 11.0;
		assertEquals("Negative input average calculation is incorrect", expectedAverage, studentGrade.getAverage(),
				0.00001);
	}

	@Test
	@Category(Categories.valid.class)
	public void calculateAverageWithHighInputs() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(1000000.0);
		studentGrade.setB(2000000.0);
		double expectedAverage = (1000000.0 * 3.5 + 2000000.0 * 7.5) / 11.0;
		assertEquals("High input average calculation is incorrect", expectedAverage, studentGrade.getAverage(),
				0.00001);
	}

	@Test
	@Category(Categories.valid.class)
	public void calculateAverageWithMixedSignInputs() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(-4.0);
		studentGrade.setB(5.0);
		double expectedAverage = (-4.0 * 3.5 + 5.0 * 7.5) / 11.0;
		assertEquals("Mixed sign inputs calculation is incorrect", expectedAverage, studentGrade.getAverage(), 0.00001);
	}

}