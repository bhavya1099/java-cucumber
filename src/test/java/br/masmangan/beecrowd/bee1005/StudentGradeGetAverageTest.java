// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model

ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

```
Scenario 1: Calculating average when both scores are zero

Details:
  TestName: calculateAverageWithZeroScores
  Description: This test checks the behavior of the getAverage method when both scores a and b are set to zero, which is the lowest possible valid input for these scores.
Execution:
  Arrange: Set the score a to 0 and the score b to 0 using setA and setB respectively.
  Act: Invoke the getAverage method to calculate the average.
  Assert: Assert that the result of getAverage is 0.0.
Validation:
  Clarify what the assertion aims to verify and the reason behind the expected result: Since both scores are zero, their weighted contributions should also result in zero, leading to an average of zero. This test confirms the method handles minimum boundary values correctly.
  Elaborate on the significance of the test in the context of application behavior or business logic: Ensuring that the method correctly calculates the average for the minimum input values is crucial for maintaining accurate grade calculations across the application.

Scenario 2: Calculating average with positive scores

Details:
  TestName: calculateAverageWithPositiveScores
  Description: This test checks the getAverage method's correctness when both input scores a and b are positive.
Execution:
  Arrange: Set score a to 70 and score b to 80 using setA and setB.
  Act: Invoke the getAverage method to calculate the average.
  Assert: Assert that the result is approximately 76.81818181818181.
Validation:
  Clarify what the assertion aims to verify and the reason behind the expected result: The expected result is derived from the weighted average formula (a * 3.5 + b * 7.5) / 11.0. For a=70 and b=80, the calculation should be (70*3.5 + 80*7.5) / 11.0 â‰ˆ 76.81818181818181.
  Elaborate on the significance of the test in the context of application behavior or business logic: Verifying that the method accurately calculates averages with typical positive scores ensures reliability in grade computation, critical for academic evaluations.

Scenario 3: Calculating average with one positive and one zero score

Details:
  TestName: calculateAverageWithMixedScores
  Description: This test evaluates the getAverage method when one of the scores is positive and the other is zero.
Execution:
  Arrange: Set score a to 0 and score b to 85 using setA and setB.
  Act: Invoke the getAverage method to calculate the average.
  Assert: Assert that the result is approximately 57.95454545454545.
Validation:
  Clarify what the assertion aims to verify and the reason behind the expected result: Given the weighted formula, the contribution of score a is zero, and only b contributes to the average. The expectation is based on the formula calculation for b=85.
  Elaborate on the significance of the test in the context of application behavior or business logic: This test ensures that the method can correctly compute the average when one of the scores contributes nothing to the outcome, which is vital for cases where a component of the grade is missing or exempted.

Scenario 4: Calculating average with maximum possible scores

Details:
  TestName: calculateAverageWithMaxScores
  Description: This test checks the getAverage method when both input scores a and b are at their maximum valid values.
Execution:
  Arrange: Set score a to 100 and score b to 100 using setA and setB.
  Act: Invoke the getAverage method to calculate the average.
  Assert: Assert that the result is 100.0.
Validation:
  Clarify what the assertion aims to verify and the reason behind the expected result: The maximum scores should result in the maximum possible average, which is 100.0, based on the weighted average calculation.
  Elaborate on the significance of the test in the context of application behavior or business logic: Ensuring that the method handles maximum input values correctly is crucial for fairness and accuracy in scenarios where students achieve full marks in all components.
```
These scenarios ensure a thorough verification of the `getAverage` method across different boundary and typical values, crucial for the reliability and correctness of grade calculations in educational applications.
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1005;

import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.experimental.categories.Category;

public class StudentGradeGetAverageTest {

	@Test
	@Category(Categories.boundary.class)
	public void calculateAverageWithZeroScores() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0);
		studentGrade.setB(0);
		double expected = 0.0;
		double actual = studentGrade.getAverage();
		assertEquals("Expected average should be 0.0 for zero scores", expected, actual, 0.0001);
	}

	@Test
	@Category(Categories.valid.class)
	public void calculateAverageWithPositiveScores() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(70);
		studentGrade.setB(80);
		double expected = 76.81818181818181;
		double actual = studentGrade.getAverage();
		assertEquals("Expected average should be approximately 76.818 for scores 70 and 80", expected, actual, 0.0001);
	}

	@Test
	@Category(Categories.valid.class)
	public void calculateAverageWithMixedScores() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0);
		studentGrade.setB(85);
		double expected = 57.95454545454545;
		double actual = studentGrade.getAverage();
		assertEquals("Expected average should be approximately 57.955 for scores 0 and 85", expected, actual, 0.0001);
	}

	@Test
	@Category(Categories.boundary.class)
	public void calculateAverageWithMaxScores() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(100);
		studentGrade.setB(100);
		double expected = 100.0;
		double actual = studentGrade.getAverage();
		assertEquals("Expected average should be 100.0 for maximum scores", expected, actual, 0.0001);
	}

}