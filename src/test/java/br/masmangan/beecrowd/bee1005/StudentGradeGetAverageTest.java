// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
ROOST_METHOD_HASH=getAverage_cd4fabe1ad
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3
"""
Scenario 1: Test to Compute Average When No Grades Have Been Set
Details:
    TestName: testComputeAverageWhenNoGradesHaveBeenSet.
    Description: This test will check that the average calculation is zero when no grades have been set (i.e., a=0, b=0).
  Execution:
    Arrange: Create a new instance of StudentGrade, and set grades a and b to zero.
    Act: Invoke the getAverage() method.
    Assert: Verify that the expected average is 0.
  Validation:
    Since both grades are zero, we expect the method to return average 0, hence, the test will verify the default state of our calculator. It should handle the edge case where no grades have been initialized/set.
Scenario 2: Test to Compute Average of Non-Zero Grades
Details:
    TestName: testComputeAverageOfNonZeroGrades.
    Description: This test will check the average calculation of two non-zero grades (i.e., a=2, b=4).
  Execution:
    Arrange: Create a new instance of StudentGrade, and set grades a and b to 2 and 4 respectively.
    Act: Invoke the getAverage() method.
    Assert: Verify that the expected average is 3.636.
  Validation:
    The expected average of 3.636 is calculated as follows: (2*3.5 + 4*7.5) / 11.0. The test scenario validates that the getAverage method works correctly for a typical use case with non-zero grades
Scenario 3: Test to Compute Average for Negative Grades
Details:
    TestName: testComputeAverageForNegativeGrades.
    Description: This test will check the average calculation when negative grades are given (i.e., a=-2, b=-4).
  Execution:
    Arrange: Create a new instance of StudentGrade, and initialize grades a and b to -2 and -4 respectively.
    Act: Invoke the getAverage() method.
    Assert: Verify that the expected average is -3.636.
  Validation:
    Since the formula incorporates negative grades as-is, the getAverage should return -3.636. This scenario tests whether our method correctly handles negative grades.
    It also tests the underlying assumption about the validity of grades (i.e., whether negative grades are allowed or not).
Scenario 4: Test to Compute Average When Grades Are Maximum Doubles
Details:
    TestName: testComputeAverageForMaxValueGrades.
    Description: This test will check the average calculation when grades are at their maximum (i.e., a=Double.MAX_VALUE, b=Double.MAX_VALUE).
  Execution:
    Arrange: Create a new instance of StudentGrade, and set grades a and b to Double.MAX_VALUE and Double.MAX_VALUE respectively.
    Act: Invoke the getAverage() method.
    Assert: Verify that the expected average is Double.MAX_VALUE (due to numerical overflow).
  Validation:
    This is an edge case which tests if the getAverage method handles maximum double values without errors.
Scenario 5: Test to Compute Average When Grades Are Minimum Doubles
Details:
    TestName: testComputeAverageForMinValueGrades.
    Description: This test will check the average calculation when grades are at their minimum(i.e., a=Double.MIN_VALUE, b=Double.MIN_VALUE).
  Execution:
    Arrange: Create a new instance of StudentGrade, and set grades a and b to Double.MIN_VALUE and Double.MIN_VALUE respectively.
    Act: Invoke the getAverage() method.
    Assert: Verify that the expected average is very close to zero.
  Validation:
    This is an edge case which tests if the getAverage method handles minimum double values without errors.
"""
*/
// ********RoostGPT********
package br.masmangan.beecrowd.bee1005;

import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.assertEquals;
import org.junit.experimental.categories.Category;

@Category({ Categories.getAverage.class })
public class StudentGradeGetAverageTest {

	@Test
	@Category(Categories.valid.class)
	public void testComputeAverageWhenNoGradesHaveBeenSet() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0);
		studentGrade.setB(0);
		double expected = 0;
		double actual = studentGrade.getAverage();
		assertEquals(expected, actual, 0.001);
	}

	@Test
	@Category(Categories.valid.class)
	public void testComputeAverageOfNonZeroGrades() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2);
		studentGrade.setB(4);
		double expected = 3.0;
		double actual = studentGrade.getAverage(); // Update variable name
		assertEquals(expected, actual, 0.001);
	}

	@Test
	@Category(Categories.valid.class)
	public void testComputeAverageForNegativeGrades() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(-2);
		studentGrade.setB(-4);
		double expected = -3.0;
		double actual = studentGrade.getAverage(); // Update variable name
		assertEquals(expected, actual, 0.001);
	}

	@Test
	@Category(Categories.boundary.class)
	public void testComputeAverageForMaxValueGrades() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(Double.MAX_VALUE);
		studentGrade.setB(Double.MAX_VALUE);
		double expected = Double.MAX_VALUE;
		double actual = studentGrade.getAverage(); // Update variable name
		assertEquals(expected, actual, 0.001);
	}

	@Test
	@Category(Categories.boundary.class)
	public void testComputeAverageForMinValueGrades() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(Double.MIN_VALUE);
		studentGrade.setB(Double.MIN_VALUE);
		double expected = 0.0;
		double actual = studentGrade.getAverage(); // Update variable name
		assertEquals(expected, actual, 0.001);
	}

}