/*
 * Copyright (C) 2021, Gherkin By Example and/or its contributors. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this code.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Please visit Gherkin By Example at https://github.com/gherkin-by-example
 * if you need additional information or have any questions.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-unit-test using AI Type  and AI Model

ROOST_METHOD_HASH=getArea_db993df5e2
ROOST_METHOD_SIG_HASH=getArea_fc67037257

"""
Scenario 1: Test for Zero Radius
Details:
  TestName: testAreaWithZeroRadius
  Description: This test checks if the getArea method returns 0 when the radius is set to 0.
Execution:
  Arrange: Set the radius of the Circle object to 0 using the setRadius method.
  Act: Invoke the getArea method on the Circle object.
  Assert: Assert that the returned area is 0.
Validation:
  The assertion verifies that the area of a circle with zero radius is indeed 0. This is important to ensure the getArea method correctly calculates the area in edge cases.

Scenario 2: Test for Positive Radius
Details:
  TestName: testAreaWithPositiveRadius
  Description: This test checks if the getArea method returns the correct area when the radius is a positive number.
Execution:
  Arrange: Set the radius of the Circle object to a known positive number using the setRadius method.
  Act: Invoke the getArea method on the Circle object.
  Assert: Assert that the returned area matches the expected value calculated manually.
Validation:
  The assertion verifies that the area of a circle with a positive radius is correctly calculated. This is the standard use case for the getArea method.

Scenario 3: Test for Negative Radius
Details:
  TestName: testAreaWithNegativeRadius
  Description: This test checks if the getArea method handles the scenario when the radius is set to a negative number.
Execution:
  Arrange: Set the radius of the Circle object to a negative number using the setRadius method.
  Act: Invoke the getArea method on the Circle object.
  Assert: Depending on the implementation, assert that either an exception is thrown or the returned area is 0.
Validation:
  The assertion verifies that the getArea method correctly handles the edge case of a negative radius. This is important to ensure the robustness of the method.

Scenario 4: Test for Maximum Double Value Radius
Details:
  TestName: testAreaWithMaxDoubleRadius
  Description: This test checks if the getArea method can handle the maximum possible radius (Double.MAX_VALUE).
Execution:
  Arrange: Set the radius of the Circle object to Double.MAX_VALUE using the setRadius method.
  Act: Invoke the getArea method on the Circle object.
  Assert: Assert that the returned area is Double.POSITIVE_INFINITY or matches the expected value calculated manually.
Validation:
  The assertion verifies that the getArea method can handle extremely large radius values. This is important to ensure the method's correctness under extreme conditions.
"""
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1002;

import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.assertEquals;

public class CircleGetAreaTest {

	private Circle circle;

	@Before
	public void setUp() {
		circle = new Circle();
	}

	@Test
	@Category(Categories.valid.class)
	public void testAreaWithZeroRadius() {
		circle.setRadius(0);
		double area = circle.getArea();
		assertEquals(0.0, area, 0.0);
	}

	@Test
	@Category(Categories.valid.class)
	public void testAreaWithPositiveRadius() {
		circle.setRadius(5);
		double area = circle.getArea();
		assertEquals(78.53975, area, 0.00001);
	}

	@Test
	@Category(Categories.invalid.class)
	public void testAreaWithNegativeRadius() {
		circle.setRadius(-5);
		double area = circle.getArea();
		assertEquals(0.0, area, 0.0);
	}

	@Test
	@Category(Categories.boundary.class)
	public void testAreaWithMaxDoubleRadius() {
		circle.setRadius(Double.MAX_VALUE);
		double area = circle.getArea();
		assertEquals(Double.POSITIVE_INFINITY, area, 0.0);
	}

}