// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=setA_a669585e3b
ROOST_METHOD_SIG_HASH=setA_4612eff528

"""
Scenario 1: Setting Positive Value

Details:
    TestName: testSetAPositiveValue.
    Description: The scenario checks if the function can successfully set a positive value to variable 'a'.
Execution:
    Arrange: Initialize a value say '5.0'.
    Act: Invoke the setA method with the initialized value.
    Assert: Compare 'a' with the initialized positive value.
Validation:
    The assertion aims to confirm that the 'a' variable retrieves the correct value after being set. This test is significant because it verifies the basic functionality of the setA method with positive inputs.

Scenario 2: Setting Negative Value

Details:
    TestName: testSetANegativeValue.
    Description: The scenario checks whether the function can set a negative value to variable 'a'.
Execution:
    Arrange: Initialize a negative value, say '-4.2'.
    Act: Invoke the setA method with the initialized negative value.
    Assert: Compare 'a' with the initialized negative value.
Validation:
    The assertion verifies whether the 'a' variable can store a negative decimal number. This test checks if setA method perform as expected with negative inputs.


Scenario 3: Setting Zero Value

Details:
    TestName: testSetAZeroValue.
    Description: This scenario verifies whether the function can handle and set a zero value to the variable 'a'.
Execution:
    Arrange: Initialize a zero value.
    Act: Invoke the setA method with the zero value.
    Assert: Compare 'a' with the zero value.
Validation:
    The assertion aims to verify that the 'a' object can hold zero value. This test is significant because it checks if the setA method perform as expected when supplied with a zero input.

Scenario 4: Setting Large Values

Details:
    TestName: testSetALargeValue.
    Description: This scenario checks the large number input handling of the function, by setting a large value to 'a'.
Execution:
    Arrange: Initialize a large value, say '1000000.0'.
    Act: Invoke the setA method with the large value.
    Assert: Compare 'a' with the large value.
Validation:
    In this scenario, the assertion verifies whether 'a' can store large values. This test is significant in case of large data scenarios for the application usage.

"""
*/

// ********RoostGPT********
package br.masmangan.beecrowd.bee1006;

import org.junit.Assert;
import org.junit.Test;

public class StudentGradeSetATest {

	private double a;

	@Test
	public void testSetAPositiveValue() {
		double positiveValue = 5.0;
		this.setA(positiveValue);

		Assert.assertEquals("Test to check if a positive value can be set", positiveValue, this.a, 0.01);
	}

	@Test
	public void testSetANegativeValue() {
		double negativeValue = -4.2;
		this.setA(negativeValue);

		Assert.assertEquals("Test to check if a negative value can be set", negativeValue, this.a, 0.01);
	}

	@Test
	public void testSetAZeroValue() {
		double zeroValue = 0.0;
		this.setA(zeroValue);

		Assert.assertEquals("Test to check if a zero value can be set", zeroValue, this.a, 0.01);
	}

	@Test
	public void testSetALargeValue() {
		double largeValue = 1000000.0;
		this.setA(largeValue);

		Assert.assertEquals("Test to check if a large value can be set", largeValue, this.a, 0.01);
	}

	private void setA(double a) {
		this.a = a;
	}

}