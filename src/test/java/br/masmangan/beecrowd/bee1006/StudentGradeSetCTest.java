// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model

ROOST_METHOD_HASH=setC_6b626570ad
ROOST_METHOD_SIG_HASH=setC_f40d5436c1

### Scenario 1: Set Normal Grade Value for C

**Details:**
- TestName: setCWithValidValue
- Description: This test checks if the setC method properly sets a typical grade value. This is to ensure that the student's grade for course C can be accurately recorded.

**Execution:**
- Arrange: Create an instance of the StudentGrade class.
- Act: Call setC with a typical grade value, e.g., 85.0.
- Assert: Check if getAverage reflects the correct computation after setting the grade.

**Validation:**
- Clarify that the assertion verifies whether the setC method correctly updates the grade for course C in the StudentGrade object. The expected result is that subsequent calculations relying on the grade for C, such as getAverage, should accurately reflect this change. This test is significant as it ensures that grade entries are correctly handled, which is crucial for accurate academic performance assessments.

---

### Scenario 2: Set Negative Grade Value for C

**Details:**
- TestName: setCWithNegativeValue
- Description: This test verifies the behavior of the setC method when a negative value is set. This scenario checks how the system handles incorrect or atypical inputs.

**Execution:**
- Arrange: Create an instance of the StudentGrade class.
- Act: Call setC with a negative value, e.g., -10.0.
- Assert: Verify if getAverage computes correctly even with a negative input.

**Validation:**
- Clarify that the assertion aims to check the robustness of the setC method in handling negative values. The expected result is that the method should either accept the value and reflect it in average calculations or should have validation to reject such inputs. The significance of this test lies in ensuring the system's stability and correctness under erroneous input scenarios.

---

### Scenario 3: Set Extremely High Grade Value for C

**Details:**
- TestName: setCWithExtremelyHighValue
- Description: This test examines the setC method's response to extremely high values, which might not be typical but are possible in some grading systems or due to data entry errors.

**Execution:**
- Arrange: Create an instance of the StudentGrade class.
- Act: Call setC with an extremely high value, e.g., 200.0.
- Assert: Check if getAverage can handle and correctly compute the average with such high values.

**Validation:**
- Clarify that the assertion checks if the setC method can handle unusually high input values without causing errors in computations like average grades. The expected outcome is that the system should either handle these values correctly or have constraints to limit grade values. This test is crucial for maintaining the integrity and accuracy of grade processing.

---

### Scenario 4: Set Decimal Grade Value for C

**Details:**
- TestName: setCWithDecimalValue
- Description: This test ensures that the setC method can handle decimal values, which are common in grading systems where partial points are awarded.

**Execution:**
- Arrange: Create an instance of the StudentGrade class.
- Act: Call setC with a decimal value, e.g., 75.5.
- Assert: Verify that getAverage accurately calculates the average considering the decimal grade.

**Validation:**
- Clarify that the assertion confirms the setC method's ability to accurately process decimal values. The expected result is that such values are precisely reflected in the average calculation. This test is essential to ensure that the grading system is precise and can handle detailed grade information.
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1006;

import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.assertEquals;

public class StudentGradeSetCTest {

	private StudentGrade studentGrade;

	@Before
	public void setUp() {
		studentGrade = new StudentGrade();
	}

	@Test
	@Category(Categories.valid.class)
	public void setCWithValidValue() {
		studentGrade.setA(90.0);
		studentGrade.setB(80.0);
		studentGrade.setC(85.0);
		double expectedAverage = (90.0 * 2 + 80.0 * 3 + 85.0 * 5) / 10.0;
		assertEquals("Average should be correctly computed after setting valid C grade", expectedAverage,
				studentGrade.getAverage(), 0.0001);
	}

	@Test
	@Category(Categories.invalid.class)
	public void setCWithNegativeValue() {
		studentGrade.setA(90.0);
		studentGrade.setB(80.0);
		studentGrade.setC(-10.0);
		double expectedAverage = (90.0 * 2 + 80.0 * 3 - 10.0 * 5) / 10.0;
		assertEquals("Average should be correctly computed even with negative C grade", expectedAverage,
				studentGrade.getAverage(), 0.0001);
	}

	@Test
	@Category(Categories.boundary.class)
	public void setCWithExtremelyHighValue() {
		studentGrade.setA(90.0);
		studentGrade.setB(80.0);
		studentGrade.setC(200.0);
		double expectedAverage = (90.0 * 2 + 80.0 * 3 + 200.0 * 5) / 10.0;
		assertEquals("Average should handle extremely high C grade value", expectedAverage, studentGrade.getAverage(),
				0.0001);
	}

	@Test
	@Category(Categories.valid.class)
	public void setCWithDecimalValue() {
		studentGrade.setA(90.0);
		studentGrade.setB(80.0);
		studentGrade.setC(75.5);
		double expectedAverage = (90.0 * 2 + 80.0 * 3 + 75.5 * 5) / 10.0;
		assertEquals("Average should accurately calculate with decimal C grade", expectedAverage,
				studentGrade.getAverage(), 0.0001);
	}

}