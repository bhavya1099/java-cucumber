// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getAverage_3b87df4523
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

================================VULNERABILITIES================================
Vulnerability: N/A
Issue: No security issues detected as per the provided code.
Solution: No action required.

================================================================================
Scenario 1: Test to check the correct calculation of average with positive integers

Details:
  TestName: testAverageWithPositiveIntegers.
  Description: This test is intended to check the correct calculation of the average method when provided with the input of positive integers. The average is calculated as per the formula provided in the method with each integer weighted appropriately.
Execution:
    Arrange: We input positive integers for a, b, and c.
    Act: We call the getAverage method.
    Assert: We use an AssertEquals to check the outcome against the expected average.
Validation:
  This assertion aims to verify the correct calculation of the average with the expectation that the mathematical methodology in within your code works as expected. This is important to verify the method is performing its core functionality correctly with a simple and basic test.


Scenario 2: Test for working with float inputs

Details:
  TestName: testAverageWithFloatInputs.
  Description: This test aims to validate whether the getAverage method works accurately when presented with floating point values.
Execution:
    Arrange: This involves using float type numbers for a, b, and c.
    Act: Invoke the getAverage method.
    Assert: Use JUnit assertions to verify that the output matches the expected average.
Validation:
  This assertion aims to verify the correct calculation with float inputs. It is important to check that the method is precise even when dealing with floating point numbers, as it broadens its usable input scope.



Scenario 3: Test for negative input values

Details:
  TestName: testAverageWithNegativeInputs.
  Description: This test is intended to verify the getAverage method's behavior when all input values are negative.
Execution:
    Arrange: We input negative values for a, b, and c.
    Act: Invoke the getAverage method.
    Assert: Use JUnit to assert that the returned average matches the expected output.
Validation:
  This test aims to verify that the method can handle and correctly compute averages for negative input values.

Scenario 4: Test for a mix of positive, negative and zero values

Details:
  TestName: testAverageWithMixedValues.
  Description: This test is intended to check if the getAverage method can handle a combination of positive, negative, and zero values.
Execution:
    Arrange: Involves giving a set of mixed values to a, b, and c.
    Act: The getAverage method is then invoked.
    Assert: A JUnit assertion is used to compare the returned average against the expected result.
Validation:
  This test is done to ensure that the method can handle different types of input values in a single test case. This increases the scope of usability and ensures the application behaves expectedly in real-world scenarios.

*/

// ********RoostGPT********
package br.masmangan.beecrowd.bee1006;

import org.junit.Assert;
import org.junit.Test;
import org.junit.Before;
// import the correct dependencies
import br.masmangan.beecrowd.bee1006.StudentGrade;

public class StudentGradeGetAverageTest {

	private StudentGrade studentGrade;

	@Before
	public void setUp() {
		// initialize the object in setup before each test
		studentGrade = new StudentGrade();
	}

	@Test
	public void testAverageWithPositiveIntegers() {
		studentGrade.setA(2);
		studentGrade.setB(3);
		studentGrade.setC(5);
		double result = studentGrade.getAverage();
		Assert.assertEquals(3.9, result, 0.001);
	}

	@Test
	public void testAverageWithFloatInputs() {
		studentGrade.setA(1.2);
		studentGrade.setB(2.3);
		studentGrade.setC(4.2);
		double result = studentGrade.getAverage();
		Assert.assertEquals(3.18, result, 0.001);
	}

	@Test
	public void testAverageWithNegativeInputs() {
		studentGrade.setA(-2);
		studentGrade.setB(-4);
		studentGrade.setC(-5);
		double result = studentGrade.getAverage();
		Assert.assertEquals(-4.2, result, 0.001);
	}

	@Test
	public void testAverageWithMixedValues() {
		studentGrade.setA(2.4);
		studentGrade.setB(-3);
		studentGrade.setC(0);
		double result = studentGrade.getAverage();
		Assert.assertEquals(-1.02, result, 0.001);
	}

}
