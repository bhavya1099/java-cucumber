// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model

ROOST_METHOD_HASH=getAverage_3b87df4523
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

Certainly! Below are the JUnit test scenarios for the `getAverage` method of the `StudentGrade` entity:

### Scenario 1: All Grades Are Zero
**Details:**
- TestName: checkAverageWithAllZeros
- Description: Tests the average calculation when all grades (a, b, c) are set to zero.

**Execution:**
- Arrange: Set `a`, `b`, and `c` to 0.0.
- Act: Call `getAverage()` method.
- Assert: Assert that the returned average is 0.0.

**Validation:**
- The assertion verifies that the average calculation handles the case where all grades are zero correctly. This is important to ensure that the method can handle edge cases without errors.

### Scenario 2: All Grades Are Positive
**Details:**
- TestName: checkAverageWithPositiveGrades
- Description: Tests the average calculation when all grades (a, b, c) are positive numbers.

**Execution:**
- Arrange: Set `a` to 2.0, `b` to 3.0, and `c` to 5.0.
- Act: Call `getAverage()` method.
- Assert: Assert that the returned average is correctly calculated as per the formula.

**Validation:**
- The assertion checks if the average is calculated correctly using the weighted formula. This test confirms the method's ability to compute weighted averages accurately.

### Scenario 3: Grades With Decimal Values
**Details:**
- TestName: checkAverageWithDecimalGrades
- Description: Tests the average calculation when grades (a, b, c) include decimals.

**Execution:**
- Arrange: Set `a` to 2.5, `b` to 3.5, and `c` to 4.5.
- Act: Call `getAverage()` method.
- Assert: Assert that the returned average is calculated correctly with decimal values.

**Validation:**
- This test ensures that the method can handle decimal inputs and still compute the average correctly. It's crucial for precision in real-world scenarios where grades might not always be whole numbers.

### Scenario 4: Negative Grades
**Details:**
- TestName: checkAverageWithNegativeGrades
- Description: Tests the average calculation when one or more grades (a, b, c) are negative.

**Execution:**
- Arrange: Set `a` to -1.0, `b` to 2.0, and `c` to 3.0.
- Act: Call `getAverage()` method.
- Assert: Assert that the returned average is calculated correctly even with negative values.

**Validation:**
- This test is important to verify that the method can correctly handle negative values, reflecting scenarios where the input might unintentionally be negative.

### Scenario 5: Maximum and Minimum Boundary Values
**Details:**
- TestName: checkAverageWithBoundaryValues
- Description: Tests the average calculation at the boundary values for grades (a, b, c).

**Execution:**
- Arrange: Set `a` to Double.MAX_VALUE, `b` to Double.MIN_VALUE, and `c` to Double.MAX_VALUE.
- Act: Call `getAverage()` method.
- Assert: Assert and handle any overflow or underflow issues, ensuring the method behaves as expected.

**Validation:**
- This scenario checks the robustness of the average calculation under extreme conditions. It's crucial for ensuring that the application can handle large or small numbers without computational errors.

These scenarios cover a range of possible inputs and conditions to ensure that the `getAverage` method of the `StudentGrade` entity functions correctly across different cases, enhancing reliability and correctness in the application's grading system.
*/

// ********RoostGPT********

package br.masmangan.beecrowd.bee1006;

import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.experimental.categories.Category;

public class StudentGradeGetAverageTest {

	@Test
	@Category(Categories.valid.class)
	public void checkAverageWithAllZeros() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(0.0);
		studentGrade.setB(0.0);
		studentGrade.setC(0.0);
		assertEquals(0.0, studentGrade.getAverage(), 0.0001);
	}

	@Test
	@Category(Categories.valid.class)
	public void checkAverageWithPositiveGrades() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.0);
		studentGrade.setB(3.0);
		studentGrade.setC(5.0);
		assertEquals(4.1, studentGrade.getAverage(), 0.0001);
	}

	@Test
	@Category(Categories.valid.class)
	public void checkAverageWithDecimalGrades() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(2.5);
		studentGrade.setB(3.5);
		studentGrade.setC(4.5);
		assertEquals(3.85, studentGrade.getAverage(), 0.0001);
	}

	@Test
	@Category(Categories.invalid.class)
	public void checkAverageWithNegativeGrades() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(-1.0);
		studentGrade.setB(2.0);
		studentGrade.setC(3.0);
		assertEquals(1.7, studentGrade.getAverage(), 0.0001);
	}

	@Test
	@Category(Categories.boundary.class)
	public void checkAverageWithBoundaryValues() {
		StudentGrade studentGrade = new StudentGrade();
		studentGrade.setA(Double.MAX_VALUE);
		studentGrade.setB(Double.MIN_VALUE);
		studentGrade.setC(Double.MAX_VALUE);
		double result = studentGrade.getAverage();
		boolean validResult = !Double.isInfinite(result) && !Double.isNaN(result);
		assertEquals(true, validResult);
	}

}