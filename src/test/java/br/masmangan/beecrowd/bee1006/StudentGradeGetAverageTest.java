// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getAverage_3b87df4523
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

================================VULNERABILITIES================================
Vulnerability: Invalid Input (or Unexpected Values)
Issue: Code does not have validation checks to verify if the values being input to a, b and c are valid doubles. An invalid input (for example, NaN or Infinity), may cause software to behave unexpectedly.
Solution: Always validate input in your methods. Add validation checks to verify that the values are valid doubles and not infinite or NaN before executing the calculation.

================================================================================
Scenario 1: Test getAverage with valid inputs
Details:
  TestName: testGetAverageWithValidInputs.
  Description: This test will ensure that the method getAverage correctly calculates the average.
  Execution:
    Arrange: Initialize a, b, and c with known values.
    Act: Invoke the target method getAverage.
    Assert: Assert the output of the function with the manual calculation of the average.
  Validation:
    This assertion aims to verify that the average calculation is implemented correctly. A successful output validates the correct implementation of the method.

Scenario 2: Test getAverage with negative inputs
Details:
  TestName: testGetAverageWithNegativeInputs.
  Description: This test aims to test the method's behavior when negative numbers are passed.
  Execution:
    Arrange: Initialize a, b, and c with negative values.
    Act: Invoke the target method getAverage.
    Assert: Assert the output of the function with the manual calculation of the average.
  Validation:
    This will ensure that the average calculation is handled correctly even when negative values are provided.

Scenario 3: Test getAverage with zero inputs
Details:
  TestName: testGetAverageWithZeroInputs.
  Description: This tests the edge case where all the inputs are zeros.
  Execution:
    Arrange: Initialize a, b, and c with zero values.
    Act: Invoke the target method getAverage.
    Assert: Assert that the output of the function is zero.
  Validation:
    This will validate that average calculation when all inputs are zero produces the correct output which should be zero.

Scenario 4: Test getAverage with large number inputs
Details:
  TestName: testGetAverageWithLargeNumbers.
  Description: This tests the behavior when very large numbers are provided as inputs.
  Execution:
    Arrange: Initialize a, b, and c with very large values.
    Act: Invoke the target method getAverage.
    Assert: Assert the output of the function with the manual calculation of the average.
  Validation:
    Validate that the average calculation can handle large size data without losing precision or producing errors.

Scenario 5: Test getAverage with mix of positive and negative numbers
Details:
  TestName: testGetAverageWithMixedNumbers.
  Description: Test the getAverage method when inputs are a mix of positive and negative numbers.
  Execution:
    Arrange: Initialize a, b, and c where a and b are negative and c is positive or any such combinations.
    Act: Invoke the target method getAverage.
    Assert: Assert the output of the function with manual calculation of the average.
  Validation:
    This will verify that getAverage correctly returns the average even with mixed number inputs. It nets off the positive and negative values and calculates the average.
*/

// ********RoostGPT********
package br.masmangan.beecrowd.bee1006;

public class StudentGradeGetAverage {

	private double a;

	private double b;

	private double c;

	public void setA(double a) {
		this.a = a;
	}

	public void setB(double b) {
		this.b = b;
	}

	public void setC(double c) {
		this.c = c;
	}

	public double getAverage() {
		return (this.a * 2.0 + this.b * 3.0 + this.c * 5.0) / 10.0;
	}

}
