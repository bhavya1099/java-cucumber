// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getAverage_3b87df4523
ROOST_METHOD_SIG_HASH=getAverage_5d8b4919d3

"""
  Scenario 1: Test getAverage with positive values

  Details:
    TestName: testGetAveragePositiveValues
    Description: This test is meant to check the method getAverage() when abc are all positive values. It's aiming to check if the formula of calculation is correctly implemented.
  Execution:
    Arrange: Assign positive values to a, b, and c.
    Act: Run the getAverage() method.
    Assert: Verify if the returned average matches the expected value.
  Validation:
    The test verifies the average calculation of positive value inputs. If the formula is correctly implemented, the test should pass. This is significant as it checks the basic functionality of the getAverage method with all positive numbers.

  Scenario 2: Test getAverage with zero values

  Details:
    TestName: testGetAverageZeroValues
    Description: This test is meant to validate the getAverage() method when abc are all zero. It is important as it tests the method's response to neutral inputs.
  Execution:
    Arrange: Assign zero values to a, b, and c.
    Act: Call the getAverage() method.
    Assert: Check if the returned average is zero.
  Validation:
    The test checks if the method correctly deals with zero inputs and returns the correct result of zero. This verifies that the method can handle an edge-case scenario.

  Scenario 3: Test getAverage with negative values

  Details:
    TestName: testGetAverageNegativeValues
    Description: This test is to check the getAverage() method when abc are all negative values. It tests the method's computation with negative inputs.
  Execution:
    Arrange: Assign negative values to a, b, and c.
    Act: Invoke the getAverage() method.
    Assert: Verify that the returned average matches the expected value.
  Validation:
    The test examines the method's correct average calculation with all negative numbers. The test should pass if the formula is correctly implemented, verifying the method's handling of negative values.

  Scenario 4: Test getAverage with mixed positive, negative and zero values

  Details:
    TestName: testGetAverageMixedValues
    Description: This test is designed to validate the getAverage() method when abc are a combination of positive, negative, and zero. This diverse testing scenario analyses the method's capacity handling mixed types of input.
  Execution:
    Arrange: Assign a positive value to a, a negative value to b, and zero to c.
    Act: Execute the getAverage() method.
    Assert: Make sure the returned average matches the expected value.
  Validation:
    The test facilitates the measurement of the method's resilience against mixed input values. It allows verification that the computation logic appropriately handles diverse inputs.
"""
*/

// ********RoostGPT********
package br.masmangan.beecrowd.bee1006;

import org.junit.Test;
import static org.junit.Assert.*;

public class StudentGradeGetAverageTest {

	@Test
	public void testGetAveragePositiveValues() {
		double a = 2.0, b = 3.0, c = 5.0;
		double expectedAverage = (a * 2.0 + b * 3.0 + c * 5.0) / 10.0;
		StudentGrade studentGrade = new StudentGrade(a, b, c);
		assertEquals(expectedAverage, studentGrade.getAverage(), 0.01);
	}

	@Test
	public void testGetAverageZeroValues() {
		double a = 0, b = 0, c = 0;
		double expectedAverage = 0.0;
		StudentGrade studentGrade = new StudentGrade(a, b, c);
		assertEquals(expectedAverage, studentGrade.getAverage(), 0.01);
	}

	@Test
	public void testGetAverageNegativeValues() {
		double a = -2.0, b = -3.0, c = -5.0;
		double expectedAverage = (a * 2.0 - b * 3.0 - c * 5.0) / 10.0;
		StudentGrade studentGrade = new StudentGrade(a, b, c);
		assertEquals(expectedAverage, studentGrade.getAverage(), 0.01);
	}

	@Test
	public void testGetAverageMixedValues() {
		double a = 2.0, b = -3.0, c = 0;
		double expectedAverage = (a * 2.0 - b * 3.0 - c * 5.0) / 10.0;
		StudentGrade studentGrade = new StudentGrade(a, b, c);
		assertEquals(expectedAverage, studentGrade.getAverage(), 0.01);
	}

}
