// ********RoostGPT********
/*
Test generated by RoostGPT for test java-customannotation-test using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=getDifference_8e14ab318e
ROOST_METHOD_SIG_HASH=getDifference_0b169691c7
"""
Scenario 1: Test when all variables are zero
Details:
  TestName: testWhenAllVariablesAreZero
  Description: This test is meant to check the functionality of the getDifference method when all variables a, b, c, and d are zero. 
Execution:
  Arrange: Set variables a, b, c, and d to zero.
  Act: Invoke the getDifference method.
  Assert: Use JUnit assertions to check if the result is zero.
Validation:
  The assertion aims to verify that the getDifference method correctly handles the case when all variables are zero. The expected result is zero because the multiplication of any number by zero is zero, and the difference of two zeros is also zero.
Scenario 2: Test when a and b are positive and c and d are negative
Details:
  TestName: testWhenABPositiveAndCDNegative
  Description: This test is meant to check the functionality of the getDifference method when a and b are positive numbers and c and d are negative numbers.
Execution:
  Arrange: Set variables a and b to positive numbers and c and d to negative numbers.
  Act: Invoke the getDifference method.
  Assert: Use JUnit assertions to check if the result is positive.
Validation:
  The assertion aims to verify that the getDifference method correctly handles the case when a and b are positive numbers and c and d are negative numbers. The expected result is positive because the multiplication of two negative numbers is positive, and the difference between two positive numbers is also positive.
Scenario 3: Test when a and b are negative and c and d are positive
Details:
  TestName: testWhenABNegativeAndCDPositive
  Description: This test is meant to check the functionality of the getDifference method when a and b are negative numbers and c and d are positive numbers.
Execution:
  Arrange: Set variables a and b to negative numbers and c and d to positive numbers.
  Act: Invoke the getDifference method.
  Assert: Use JUnit assertions to check if the result is negative.
Validation:
  The assertion aims to verify that the getDifference method correctly handles the case when a and b are negative numbers and c and d are positive numbers. The expected result is negative because the multiplication of two negative numbers is positive, and the difference between a positive number and a larger positive number is negative.
Scenario 4: Test when a and b are positive and c and d are zero
Details:
  TestName: testWhenABPositiveAndCDZero
  Description: This test is meant to check the functionality of the getDifference method when a and b are positive numbers and c and d are zero.
Execution:
  Arrange: Set variables a and b to positive numbers and c and d to zero.
  Act: Invoke the getDifference method.
  Assert: Use JUnit assertions to check if the result is equal to the product of a and b.
Validation:
  The assertion aims to verify that the getDifference method correctly handles the case when a and b are positive numbers and c and d are zero. The expected result is the product of a and b because the multiplication of any number by zero is zero, and the difference between a positive number and zero is the positive number itself.
"""
*/
// ********RoostGPT********
package br.masmangan.beecrowd.bee1007;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.experimental.categories.Category;

@Category({Categories.getDifference.class,Categories.roostTestTag1.class,Categories.roostTestTag2.class})
public class ProductGetDifferenceTest {
    private int a, b, c, d;
    @Test
    public void testWhenAllVariablesAreZero() {
        this.a = 0; 
        this.b = 0; 
        this.c = 0; 
        this.d = 0;
        int expected = 0;
        assertEquals(expected, getDifference());
    }
    @Test
    public void testWhenABPositiveAndCDNegative() {
        this.a = 1; 
        this.b = 1; 
        this.c = -1; 
        this.d = -1;
        int expected = 2;
        assertEquals(expected, getDifference());
    }
    @Test
    public void testWhenABNegativeAndCDPositive() {
        this.a = -1; 
        this.b = -1; 
        this.c = 1; 
        this.d = 1;
        int expected = -2;
        assertEquals(expected, getDifference());
    }
    @Test
    public void testWhenABPositiveAndCDZero() {
        this.a = 1; 
        this.b = 1; 
        this.c = 0; 
        this.d = 0;
        int expected = 1;
        assertEquals(expected, getDifference());
    }
    private int getDifference() {
        return a * b - c * d;
    }
}